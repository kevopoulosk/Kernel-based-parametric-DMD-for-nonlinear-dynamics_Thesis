//load "PETSc"
include "macro_ddm.idp"
load "iovtk"


// number of elements
int n1 = 40; 
int n2 = 60; 
// initialise some parameters
real mu = 0.001; // Dynamic viscosity of the fluid
real rho = 1; // density of the fluid
real dt = 0.01; // time-stepping of the simulation
real T = 5; // total time of the simulation 

real uin = 1.5; //velocity 
// kinematic viscosity
real nu = mu/rho; 

real Re = (1/nu)*uin*(0.1);

// timestep to save the data 
int saveEach = 0.5/dt;
// this has to do with the vtk file
int[int] orderOut = [1, 1, 1, 1];

// useful for the definiton of NS equations
macro div(u) (dx(u#x) + dy(u#y))//
macro grad(u) [dx(u), dy(u)]//
macro Grad(u) [grad(u#x), grad(u#y)]//

func fx = 0;
func fy = 0;

// define labels for the boundary conditions
int Wall = 1;
int Inlet = 2;
int Outlet = 3;
int Cyl = 4;

// Consruct the mesh (not sure of the boundary conditions yet)
border B1(t=0,1){x=0.0+t*2.2; y=0.0; label = Wall;}; // Bottom wall
border B2(t=0,1){x=2.2; y=0.0+t*0.41; label = Outlet;}; // Right side-outlet
border B3(t=0,1){x=2.2-t*2.2; y=0.41; label = Wall;}; // Top wall
border B4(t=0,1){x=0.0; y=0.41-t*0.41; label = Inlet;}; // Left side-inlet 

border Cylinder(t=0, 2*pi){
    real xcylinder = 0.2 + 0.05 * cos(t);
    real ycylinder = 0.2 + 0.05 * sin(t);
    x = xcylinder;
    y = ycylinder;
    label = Cyl;
}


mesh Mesh = buildmesh(B1(n2) + B2(n1) + B3(n2) + B4(n1) + Cylinder(-n2)); // build the mesh

plot(Mesh, wait=true);


// Define the function space 
fespace UPh(Mesh, [P2,P2,P1]);
UPh [ux, uy, p]; // velocity components (x and y-directions) and pressure component (second order for velocity and first order for pressure)
UPh [uhx, uhy, ph]; // velocity and pressure components 
UPh [upx, upy, pp]; // velocity and pressure components

// define the variational form of NS equations
varf navierstokes([ux, uy, p], [uhx, uhy, ph])
  = int2d(Mesh)(
      1/dt* [ux, uy]'* [uhx, uhy]
    + nu * (Grad(u):Grad(uh))
    - p* div(uh)
    - ph* div(u)
    - 1e-10 *p*ph // stabilisation term for the pressure
    )
  + int2d(Mesh) (
      [fx, fy]' * [uhx, uhy]
    + 1/dt* [convect([upx, upy], -dt, upx), convect([upx, upy], -dt, upy)]'* [uhx, uhy]
    )
  + on(Wall, ux=0, uy=0) // noslip conditions on the walls
  + on(Inlet, ux=(4*uin*y*(0.41-y))/0.41^2, uy=0) // parabolic function for the flow at the inlet
  + on(Outlet, p=0)
  + on(Cyl, ux=0, uy=0) // noslip Dirichlet BC on the cylinder
;

[ux, uy, p]=[0, 0, 0]; // initial conditions for the simulation

matrix<real> NS = navierstokes(UPh, UPh); // bilinear form
real[int] NSrhs = navierstokes(0, UPh); // linear form

// set(NS, sparams = "-pc_type lu"); 
set(NS, sparams = "-ksp_type gmres -pc_type ilu");


for(int i = 0; i < T/dt; i++)
{
  [upx, upy, pp]=[ux, uy, p];

  NSrhs = navierstokes(0, UPh);
  ux[] = NS^-1 * NSrhs;
  plot([ux, uy], wait=0, cmm="Iter= "+i+ " Re=" +Re);
  if (i % saveEach == 0)
    savevtk("flow_around_cylinder.vtk", Mesh, ux, uy, p, dataname=" u v p", order=orderOut,
            append = i ? true : false);

}
plot([ux,uy], p, wait=1);

