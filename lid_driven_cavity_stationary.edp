real uin = 1; // initial velocity
int m = 25; //number of elements  
real L = 1; // length of the square


string PathToDirectory = "/Users/konstantinoskevopoulos/Documents/SnapshotData/lid_driven_cavity/";

// define and construct the mesh
border C1(t = 0, L){ x = t; y = 0; label = 1; } // noslip (bottom of the mesh)
border C2(t = 0, L){ x = L; y = t; label = 2; } // noslip (right of the mesh)
border C3(t = 0, L){ x = L-t; y = L; label = 3; } // inflow (top of the mesh )
border C4(t = 0, L){ x = 0; y = L-t; label = 4; } // noslip (left of the mesh )
mesh Th = buildmesh( C1(m) + C2(m) + C3(m) + C4(m)); // same number of elements in every edge
plot(Th, wait=1);

cout << "Number of Elements: " + Th.nt << endl;



real mu = 0.01;
real rho = 1;
real nu = mu/rho;

real Re = (1/nu)*uin*L;

int nsnsh = 240;



fespace Vh(Th,[P2,P2,P1]);
Vh [u,v,p],[uu,vv,pp],[up,vp,q];
Vh[int] [usnsh,vsnsh,psnsh](nsnsh);

macro div(u,v)(dx(u)+dy(v))//
macro grad(u)[dx(u),dy(u)]//

int i,j,k;

problem NSunst([u,v,p],[uu,vv,pp],solver=sparsesolver)=
int2d(Th)(nu*(grad(u)'*grad(uu)+grad(v)'*grad(vv)))
+int2d(Th)([up,vp]'*grad(u)*uu+[up,vp]'*grad(v)*vv)
-int2d(Th)(p*div(uu,vv)+pp*div(u,v))
+int2d(Th)(1.e-10*p*pp)
+on(1,2,4,u=0,v=0)
+on(3,u=uin,v=0)
;


// Function to generate random numbers within a given range
func real RNG(real low, real high, int size) {
    return low + (high - low) * randreal1();
}

real SampleSize = 240.; // Size of the array of andom numbers 
real Re20 = 0.2;              // Velocity for Re=20
real Re4000 = 40.;              // Velocity for Re=4000


real[int] velocitiesSample(SampleSize);


for (j=0;j<nsnsh;j++){
    for (i=0;i<225;i++){ // here starts the fixed-point iteration for the nonlinearity
        NSunst;
        up[]=u[];

}
    usnsh[j][]=u[];
    
    plot([usnsh[j],vsnsh[j]], wait = 1, cmm="Reynolds="+Re);

    {ofstream fout(PathToDirectory+"/u"+"/sample_"+j+"_u.txt");
    fout << usnsh[j][] << endl;
    }

    {ofstream fout(PathToDirectory+"/v"+"/sample_"+j+"_v.txt");
    fout << vsnsh[j][] << endl;
    }

    {ofstream fout(PathToDirectory+"/p"+"/sample_"+j+"_p.txt");
    fout << psnsh[j][] << endl;
    }

    cout << "Sample No."+ j+ " saved" << endl;


    real randomnum = RNG(Re20, Re2200, SampleSize);
    velocitiesSample(j) = randomnum;
    uin = randomnum;
    Re = (1/nu)*randomnum*L;
}



{ofstream fout(PathToDirectory+"/velocities"+"/velocities_sampled.txt");
  fout << velocitiesSample << endl;
}
cout << "Array of randomly sampled velocities is saved." << endl;




















