load "iovtk"

// Parameters
real dt = 0.01;
real D = 1;
int m = 60;
real L = 1.0;
real Tend = 5;
real SampleSize = 500.;


string DirectorySamples = "/Users/konstantinoskevopoulos/Documents/Heat_Eq_Thesis/Parameter_Samples/";
string DirectoryData = "/Users/konstantinoskevopoulos/Documents/Heat_Eq_Thesis/SnapshotData/";

ifstream file(DirectorySamples+"samples_heat_eq.txt");

real[int] Mu1(SampleSize);
real[int] Mu2(SampleSize);



// Read data from the file into arrays
for (int i = 0; i < SampleSize; ++i) {
    file >> Mu1[i] >> Mu2[i];
}




for (int sample = 0; sample <= SampleSize; sample++){

    real cpu=clock();
    
    // define and construct the mesh
    border C1(t = 0, L){ x = t; y = 0; label = 1; } // (bottom of the mesh)
    border C2(t = 0, L){ x = L; y = t; label = 2; } // (right of the mesh)
    border C3(t = 0, L){ x = L-t; y = L; label = 3; } // (top of the mesh )
    border C4(t = 0, L){ x = 0; y = L-t; label = 4; } //  (left of the mesh )
    mesh Th = buildmesh( C1(m) + C2(m) + C3(m) + C4(m)); // same number of elements in every edge
    // plot(Th, wait=1);


    // cout << "Number of Elements: " + Th.nt << endl;

    // Fespace
    fespace Vh(Th, P1);
    Vh u, v, uu, f, g;

    // Problem
    problem dHeat (u, v)
        = int2d(Th)(
            u*v
            + dt*D*(dx(u)*dx(v) + dy(u)*dy(v))
        )
        + int2d(Th)(
            - uu*v
            - (dt*f)*v
        )
        + on(C1, C2, C3, C4, u=0)
        ;

    // Time loop
    real t = 0;
    uu = 0;
    real m1 = Mu1[sample];
    real m2 = Mu2[sample];

    for (int m = 0; m <= Tend/dt; m++){
        // Update
        t = t+dt;
        f = 100*sin(2*pi*x) * sin(2*pi*y) * sin(2*pi*t) - (m1/m2) * (exp(m2*u) - 1);
        uu = u;

        // Solve
        dHeat;

        // Plot
        plot(u, wait=true, value=true, fill=true, cmm="t="+t+", mu1="+m1+", mu2="+m2);

        
        if (sample == 0){
            {ofstream fout(DirectoryData+"mu"+sample+"/t="+t+".txt");
            fout << u[]<< endl;
            
            }
        }
    }

    cout << sample+"/"+SampleSize+" completed, m1="+m1+", m2="+m2 << endl;
    cout << "CPU time = " << (clock()-cpu) << endl;
}





