real uin = 0.2; // initial velocity
int n1 = 25; //number of elements  
int n2=45;


string PathToDirectory = "/Users/konstantinoskevopoulos/Documents/SnapshotData/flow_around_cylinder/";

// define labels for the boundary conditions
int Wall = 1;
int Inlet = 2;
int Outlet = 3;
int Cyl = 4;

// Consruct the mesh (not sure of the boundary conditions yet)
border B1(t=0,1){x=0.0+t*2.2; y=0.0; label = Wall;}; // Bottom wall
border B2(t=0,1){x=2.2; y=0.0+t*0.41; label = Outlet;}; // Right side-outlet
border B3(t=0,1){x=2.2-t*2.2; y=0.41; label = Wall;}; // Top wall
border B4(t=0,1){x=0.0; y=0.41-t*0.41; label = Inlet;}; // Left side-inlet 

border Cylinder(t=0, 2*pi){
    real xcylinder = 0.2 + 0.05 * cos(t);
    real ycylinder = 0.2 + 0.05 * sin(t);
    x = xcylinder;
    y = ycylinder;
    label = Cyl;
}


mesh Th = buildmesh(B1(n2) + B2(n1) + B3(n2) + B4(n1) + Cylinder(-n1)); // build the mesh

plot(Th, wait=true);

cout << "Number of Elements: " + Th.nt << endl;



real mu = 0.001;
real rho = 1;
real nu = mu/rho;

real Re = (1/nu)*uin*0.1;


real SampleSize = 240.; // Size of the array of andom numbers 
real Re20 = 0.2;              // Velocity for Re=20
real Re300 = 3;              // Velocity for Re=300
real[int] velocitiesSample(SampleSize);

// Function to generate random numbers within a given range
func real RNG(real low, real high, int size) {
    return low + (high - low) * randreal1();
}

int i,j;

fespace Vh(Th,P2);
Vh u, v, uu, vv, up, vp;
fespace Ph(Th, P1);
Ph p, pp, q;




macro div(u,v)(dx(u)+dy(v))//
macro grad(u)[dx(u),dy(u)]//


problem NSunst([u,v,p],[uu,vv,pp],solver=sparsesolver)=
int2d(Th)(nu*(grad(u)'*grad(uu)+grad(v)'*grad(vv)))
+int2d(Th)([up,vp]'*grad(u)*uu+[up,vp]'*grad(v)*vv)
-int2d(Th)(p*div(uu,vv)+pp*div(u,v))
+int2d(Th)(1.e-10*p*pp)
+ on(Wall, u=0, v=0) // noslip conditions on the walls
+ on(Inlet, u=(4*uin*y*(0.41-y))/0.41^2, v=0) // parabolic function for the flow at the inlet
+ on(Outlet, p=0)
+ on(Cyl, u=0, v=0) // noslip Dirichlet BC on the cylinder
;



//for each sample
for (j=0;j<SampleSize;j++){
    for (i=0;i<125;i++){ // here starts the fixed-point iteration for the nonlinearity
        NSunst;
        up[]=u[];
        vp[]=v[];
        pp[]=p[];

}
    
    // plot([u,v], wait = 1, cmm="Reynolds="+Re);

    {ofstream fout(PathToDirectory+"/u"+"/sample_"+j+"_u.txt");
    fout << u[] << endl;
    }

    {ofstream fout(PathToDirectory+"/v"+"/sample_"+j+"_v.txt");
    fout << v[] << endl;
    }

    {ofstream fout(PathToDirectory+"/p"+"/sample_"+j+"_p.txt");
    fout << p[] << endl;
    }

    cout << "Sample No."+ j+ " saved" << endl;


    real randomnum = RNG(Re20, Re300, SampleSize);
    velocitiesSample(j) = randomnum;
    uin = randomnum;
    Re = (1/nu)*uin*0.1;

}


{ofstream fout(PathToDirectory+"/velocities"+"/velocities_sampled.txt");
  fout << velocitiesSample << endl;
}
cout << "Array of randomly sampled velocities is saved." << endl;